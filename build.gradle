
group 'com.testAutomation'
version '1.0-SNAPSHOT'
apply plugin: 'java'
import groovyx.gpars.GParsPool
import net.masterthought.cucumber.ReportBuilder
import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.Reportable
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
sourceCompatibility = 1.5

repositories {
     maven {
        url "http://repo.bodar.com"
    }
      mavenCentral()
}
dependencies {
        classpath "org.codehaus.gpars:gpars:1.2.1",
                "net.masterthought:cucumber-reporting:3.5.1"
    }
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    compile group: 'io.appium', name: 'java-client', version: '5.0.0-BETA8'
      compile group: 'net.masterthought', name: 'cucumber-reporting', version: "3.5.1"
    compile group: 'com.googlecode.totallylazy', name: 'totallylazy', version: '1.85'
}

task runInSequence() {
    doLast {
        def arglist = ["-p", "pretty", "-p", "json:${reporting.baseDir}/cucumber/cucumber.json", "--glue", "com.camiloribeiro",
                       "${project.projectDir}/src/main/java/com/camiloribeiro/features"]

        return javaexec {
            main = "cucumber.api.cli.Main"
            classpath = sourceSets.main.runtimeClasspath
            args = arglist
        }
        generateReport()
    }
}
def runCucumberTests(testProperties, tag) {
    def features = fileTree(dir: "${project.projectDir}/src/main/java/com/camiloribeiro/features/").include '**/*.feature'

    GParsPool.withPool(10) {
        features.eachParallel { File file ->
            exec {
                executable "sh"
                args "-c", "mkdir -p ${reporting.baseDir}/cucumber" +
                        "&& java ${testProperties} " +
                        "-cp ${sourceSets.main.runtimeClasspath.asPath} " +
                        "cucumber.api.cli.Main " +
                        "--glue classpath:com.camiloribeiro " +
                        "${project.projectDir}/src/main/java/com/camiloribeiro/features/${file.name} " +
                        "--plugin json:${reporting.baseDir}/cucumber/${file.name}.json " +
                        "--plugin pretty > ${reporting.baseDir}/cucumber/${file.name}.log " +
                        "--tags ${tag}"
            }
            println("${file.name}: Scenario output: ${reporting.baseDir}/cucumber/${file.name}.log ")
        }
    }
    generateReport()
}

def generateReport() {
    def jsonReports = fileTree(dir: "${reporting.baseDir}/cucumber/").include '**/*.json'.toString()
    File reportOutputDirectory = new File("${reporting.baseDir}/cucumber");

    List<String> jsonReportFiles = new ArrayList<String>();
    jsonReports.each { File file ->
        jsonReportFiles.add("${reporting.baseDir}/cucumber/${file.name}".toString());
    }

    Configuration configuration = new Configuration(reportOutputDirectory, "cucumber-gradle-parallel");
    // optional configuration
    configuration.setParallelTesting(true);
    configuration.setRunWithJenkins(false);
    configuration.setBuildNumber("1988");

    ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, configuration);
    Reportable result = reportBuilder.generateReports();
    println("\nReport available on: ${reporting.baseDir}/cucumber/cucumber-html-reports/overview-features.html")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10' //we want gradle 2.10 to run this project
}
